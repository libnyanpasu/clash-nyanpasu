use super::{ClashRuntimeConfig, Draft, ClashGuard, NyanpasuAppConfig, Profiles};
use crate::{
    config::{ClashRuntimeConfigService, nyanpasu::NyanpasuAppConfigService},
    core::state::ManagedState,
    enhance,
    utils::{dirs, help},
};
use anyhow::{Result, anyhow};
use nyanpasu_utils::runtime::block_on;
use once_cell::sync::OnceCell;
use std::{env::temp_dir, path::PathBuf};

pub const RUNTIME_CONFIG: &str = "clash-config.yaml";
pub const CHECK_CONFIG: &str = "clash-config-check.yaml";

#[derive(Clone)]
pub struct ConfigService {
    clash_config: Draft<ClashGuard>,
    profiles_config: ManagedState<Profiles>,
    clash_runtime_config_service: ClashRuntimeConfigService,
    nyanpasu_config_service: NyanpasuAppConfigService,
}

impl ConfigService {
    pub fn clash() -> Draft<ClashGuard> {
        Self::global().clash_config.clone()
    }

    pub fn verge() -> Draft<NyanpasuAppConfig> {
        Self::global().verge_config.clone()
    }

    pub fn profiles() -> &'static ManagedState<Profiles> {
        &Self::global().profiles_config
    }

    pub fn runtime() -> Draft<ClashRuntimeConfig> {
        Self::global().runtime_config.clone()
    }

    /// 初始化配置
    pub fn init_config() -> Result<()> {
        crate::log_err!(block_on(Self::generate()));
        if let Err(err) = Self::generate_file(ConfigType::Run) {
            log::error!(target: "app", "{err:?}");

            let runtime_path = dirs::app_config_dir()?.join(RUNTIME_CONFIG);
            // 如果不存在就将默认的clash文件拿过来
            if !runtime_path.exists() {
                help::save_yaml(
                    &runtime_path,
                    &ConfigService::clash().latest().0,
                    Some("# Clash Nyanpasu Runtime"),
                )?;
            }
        }
        Ok(())
    }

    /// 将配置丢到对应的文件中
    pub fn generate_file(typ: ConfigType) -> Result<PathBuf> {
        let path = match typ {
            ConfigType::Run => dirs::app_config_dir()?.join(RUNTIME_CONFIG),
            ConfigType::Check => temp_dir().join(CHECK_CONFIG),
        };

        let runtime = ConfigService::runtime();
        let runtime = runtime.latest();
        let config = runtime
            .config
            .as_ref()
            .ok_or(anyhow!("failed to get runtime config"))?;

        help::save_yaml(&path, &config, Some("# Generated by Clash Nyanpasu"))?;
        Ok(path)
    }

    /// 生成配置存好
    pub async fn generate() -> Result<()> {
        let (config, exists_keys, postprocessing_outputs) = enhance::enhance().await;

        *ConfigService::runtime().draft() = ClashRuntimeConfig {
            config: Some(config),
            exists_keys,
            postprocessing_output: postprocessing_outputs,
        };

        Ok(())
    }
}

#[derive(Debug)]
pub enum ConfigType {
    Run,
    Check,
}
